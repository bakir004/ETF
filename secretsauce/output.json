{"id":0,"name":"Tehnike programiranja, Zada\u0107a 3, Zadatak 3","version":"3","languages":["C++"],"tools":{"compile":{"require":"g++","features":["optimize","warn","pedantic","C++14"]},"compile[debug]":{"require":"g++","features":["debug","C++14","asan"]},"execute":{"require":"asan"},"debug":[],"profile[asan]":{"require":"asan","input_file":"stderr.txt","fast":true}},"prepare":["compile"],"tests":[{"tools":[{"patch":[{"position":"main","code":"//AT1 testiranje maina, pitanja slati na kerim.hodzic@etf.unsa.ba\n_main();"}]},"compile[debug]",{"execute":{"expect":["Unesi broj redova i kolona matrice: \nM(1,1) = \nM(1,2) = \nM(2,1) = \nM(2,2) = \nUnesite n: \n    1    2    2    3\n    3    4    4    5\n    3    4    4    5\n    5    6    6    7"],"environment":{"stdin":"2\n2\n1\n2\n3\n4\n2"}}},"debug","profile[asan]"],"name":"Test 1","id":1},{"tools":[{"patch":[{"position":"main","code":"  Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=2, n=2;\n    try {\n        a = StvoriMatricu<int>(m, n);\nstd::map<Smjer, std::function<int(int)>> mapa{\n    {Smjer::Desno, [](int x) { return x + 1; }},\n    {Smjer::Dolje, [](int x) { return x + 2; }},\n    {Smjer::Dijagonalno, [](int x) { return x + 3; }}};\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=2;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);\n"}]},"compile[debug]",{"execute":{"expect":["    0    0    1    1\n    0    0    1    1\n    2    2    3    3\n    2    2    3    3"]}},"debug","profile[asan]"],"name":"Test 2","id":2},{"tools":[{"patch":[{"position":"main","code":"// AT 3 N Mapa prazna (ne vrsi se prosirivanje, matrica 2x4, n=3)\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca\n    int m=2, n=4;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        std::map<Smjer, std::function<int(int)>> mapa{\n            \n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=3;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"expect":["1 2 3 4\n5 6 7 8"],"environment":{"stdin":"1 2 3 4\n5 6 7 8"}}},"debug","profile[asan]"],"name":"Test 3","id":3},{"tools":[{"patch":[{"position":"main","code":"\t\n// AT 4 S Proslijedi se n<=0, treba da baci logic_error uz definisan tekst\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=2, n=4;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n   \nstd::map<Smjer, std::function<int(int)>> mapa{\n    {Smjer::Desno, [](int x) { return x + 1; }},\n    {Smjer::Dolje, [](int x) { return x + 2; }},\n    {Smjer::Dijagonalno, [](int x) { return x + 3; }}};\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=-10;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"1 2 3 4\n5 6 7 8"},"expect":["Besmislen parametar"]}},"debug","profile[asan]"],"name":"Test 4","id":4},{"tools":[{"patch":[{"position":"main","code":"\t\n\t\n// AT 5 S Poziv Ispisi uz prosljedjivanje true tako da direktno dealocira bezimenu matricu vracenu iz f-je. Proslijediti punu mapu, 2x2, n=3\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=2, n=2;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\nstd::map<Smjer, std::function<int(int)>> mapa{\n    {Smjer::Desno, [](int x) { return x + 3; }},\n    {Smjer::Dolje, [](int x) { return x + 2; }},\n    {Smjer::Dijagonalno, [](int x) { return x + 1; }}};\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=3;\n        // b=ProsiriPoFunkcijama(a, mapa, br);\n        IspisiMatricu(ProsiriPremaFunkcijama(a, mapa, br), 5, 4, true);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"1 2\n3 4"},"expect":["1 2 4 5 4 5 7 8\n3 4 6 7 6 7 9 10\n3 4 2 3 6 7 5 6\n5 6 4 5 8 9 7 8\n 3 4 6 7 2 3 5 6\n 5 6 8 9 4 5 7 8\n 5 6 4 5 4 5 3 4\n 7 8 6 7 6 7 5 6"]}},"debug","profile[asan]"],"name":"Test 5","id":5},{"tools":[{"patch":[{"position":"main","code":"// AT 6 Poziv Ispisi s matricom double vrijednosti 4x4 na 5 decimala, jednocifreni i dvocifreni brojevi uz prosljedjivanje preciznosti 3\n    Matrica<double> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=4, n=4;\n    try {\n        a = StvoriMatricu<double>(m, n);\n        UnesiMatricu_AT('A', a);\n        IspisiMatricu(a, 5, 3);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"1.22222 1.22222 1.22222 1.88888 1.88888\n1.22222 1.22222 1.22222 1.88888 1.88888\n1.22222 1.22222 1.22222 1.88888 1.88888\n1.22222 1.22222 1.22222 1.88888 1.88888"},"expect":["1.22 1.22 1.22 1.89\n1.89 1.22 1.22 1.22\n1.89 1.89 1.22 1.22\n1.22 1.89 1.89 1.22"]}},"debug","profile[asan]"],"name":"Test 6","id":6},{"tools":[{"patch":[{"position":"main","code":"// AT 7 S n=10 matrica 0x0\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr!!!\n    int m=0, n=0;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\nstd::map<Smjer, std::function<int(int)>> mapa{\n    {Smjer::Desno, [](int x) { return x + 1; }},\n    {Smjer::Dijagonalno, [](int x) { return x + 3; }}};\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=10;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n        std::cout<<\"OK\";\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);\n    std::cout<<\" OK\";"},{"position":"above_main","code":"\t\ntemplate <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"expect":["OK OK"],"environment":{"stdin":"\\n"}}},"debug","profile[asan]"],"name":"Test 7","id":7},{"tools":[{"patch":[{"position":"main","code":"// AT 8 S n=3 matrica 4x3, mapa desno, dijagonalno\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=4, n=3;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n       std::map<Smjer, std::function<int(int)>> mapa{\n    {Smjer::Desno, [](int x) { return x + 3; }},\n    {Smjer::Dijagonalno, [](int x) { return x + 1; }}};\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=3;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"6 8 4\n7 7 7\n8 2 1\n3 9 0"},"expect":["6 8 4 9 11 7 9 11 7 12 14 10\n7 7 7 10 10 10 10 10 10 13 13 13\n8 2 1 11 5 4 11 5 4 14 8 7\n3 9 0 6 12 3 6 12 3 9 15 6\n6 8 4 7 9 5 9 11 7 10 12 8\n7 7 7 8 8 8 10 10 10 11 11 11\n8 2 1 9 3 2 11 5 4 12 6 5\n3 9 0 4 10 1 6 12 3 7 13 4\n6 8 4 9 11 7 7 9 5 10 12 8\n7 7 7 10 10 10 8 8 8 11 11 11\n8 2 1 11 5 4 9 3 2 12 6 5\n3 9 0 6 12 3 4 10 1 7 13 4\n6 8 4 7 9 5 7 9 5 8 10 6\n7 7 7 8 8 8 8 8 8 9 9 9\n8 2 1 9 3 2 9 3 2 10 4 3\n3 9 0 4 10 1 4 10 1 5 11 2"]}},"debug","profile[asan]"],"name":"Test 8","id":8},{"tools":[{"patch":[{"position":"main","code":"\t\n// AT 9 S n=4 matrica 2x2, mapa dijagonalno\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr!!!\n    int m=2, n=2;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Dijagonalno, [] (int x) { return x + 3; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=4;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"\t\ntemplate <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"7 2\n7 2"},"expect":["7 2 7 2 7 2 7 2 7 2 7 2 7 2 7 2\n7 2 7 2 7 2 7 2 7 2 7 2 7 2 7 2\n7 2 10 5 7 2 10 5 7 2 10 5 7 2 10 5\n7 2 10 5 7 2 10 5 7 2 10 5 7 2 10 5\n7 2 7 2 10 5 10 5 7 2 7 2 10 5 10 5\n7 2 7 2 10 5 10 5 7 2 7 2 10 5 10 5\n7 2 10 5 10 5 13 8 7 2 10 5 10 5 13 8\n7 2 10 5 10 5 13 8 7 2 10 5 10 5 13 8\n7 2 7 2 7 2 7 2 10 5 10 5 10 5 10 5\n7 2 7 2 7 2 7 2 10 5 10 5 10 5 10 5\n7 2 10 5 7 2 10 5 10 5 13 8 10 5 13 8\n7 2 10 5 7 2 10 5 10 5 13 8 10 5 13 8\n7 2 7 2 10 5 10 5 10 5 10 5 13 8 13 8\n7 2 7 2 10 5 10 5 10 5 10 5 13 8 13 8\n7 2 10 5 10 5 13 8 10 5 13 8 13 8 16 11\n7 2 10 5 10 5 13 8 10 5 13 8 13 8 16 11"]}},"debug","profile[asan]"],"name":"Test 9","id":9},{"tools":[{"patch":[{"position":"main","code":"\n// AT 10 N n=1 matrica 1x4, mapa dolje, dijagonalno\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=1, n=4;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Dijagonalno, [] (int x) { return x + 3; }},\n            {Smjer::Dolje, [] (int x) { return x + 1; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=1;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"\t\ntemplate <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"expect":["1 2 3 4"],"environment":{"stdin":"1 2 3 4"}}},"debug","profile[asan]"],"name":"Test 10","id":10},{"tools":[{"patch":[{"position":"main","code":"\t// AT 11 N n=4 matrica 1x1, mapa dolje, desno\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=1, n=1;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Desno, [] (int x) { return x + 3; }},\n            {Smjer::Dolje, [] (int x) { return x + 1; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=4;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"expect":["5 8 8 11 8 11 11 14\n6 5 9 8 9 8 12 11\n6 9 5 8 9 12 8 11\n7 6 6 5 10 9 9 8\n6 9 9 12 5 8 8 11\n7 6 10 9 6 5 9 8\n7 10 6 9 6 9 5 8\n8 7 7 6 7 6 6 5"],"environment":{"stdin":"5"}}},"debug","profile[asan]"],"name":"Test 11","id":11},{"tools":[{"patch":[{"position":"main","code":"// AT 12 S n=3 matrica 5x2, mapa desno\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr\n    int m=5, n=2;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Desno, [] (int x) { return x + 3; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=3;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"5 6\n5 6\n5 6\n5 6\n5 6"},"expect":["5 6 8 9 8 9 11 12\n 5 6 8 9 8 9 11 12\n 5 6 8 9 8 9 11 12\n 5 6 8 9 8 9 11 12\n 5 6 8 9 8 9 11 12"]}},"debug","profile[asan]"],"name":"Test 12","id":12},{"tools":[{"patch":[{"position":"main","code":"\t\n// AT 13 S n=2 matrica 3x3, mapa dolje\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr!!!\n    int m=3, n=3;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Dolje, [] (int x) { return x + 3; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=2;\n        b=ProsiriPremaFunkcijama(a, mapa, br);\n        IspisiMatricu(b, 5);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);\n    UnistiMatricu(b);"},{"position":"above_main","code":"template <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"3 2 1\n3 2 7\n7 8 9"},"expect":["3 2 1\n3 2 7\n7 8 9\n6 5 4\n6 5 10\n10 11 12\t"]}},"debug","profile[asan]"],"name":"Test 13","id":13},{"tools":[{"patch":[{"position":"main","code":"// AT 14 N n=5 matrica 10x1, mapa desno, uz poziv Ispisi\n    Matrica<int> a, b; // AUTOMATSKA INICIJALIZACIJA dvostrukog pokazivaca na nullptr!!!\n    int m=10, n=1;\n    try {\n        a = StvoriMatricu<int>(m, n);\n        UnesiMatricu_AT('A', a);\n        // Uspjesno je unesena matrica\n        std::map<Smjer, std::function<int(int)>> mapa{\n            {Smjer::Desno, [] (int x) { return x + 3; }}\n        };\n        // Imamo mapu, imamo matricu, treba jos n\n        int br=5;\n        // b=ProsiriPoFunkcijama(a, mapa, br);\n        IspisiMatricu(ProsiriPremaFunkcijama(a, mapa, br), 5, 4, true);\n    }\n    catch(std::bad_alloc) {\n        std::cout << \"Problem sa alokacijom!\\n\";\n    }\n    catch(std::logic_error e) {\n        std::cout << e.what();\n    }\n    UnistiMatricu(a);"},{"position":"above_main","code":"\t\ntemplate <typename TipElemenata>\nvoid UnesiMatricu_AT(char ime_matrice, Matrica<TipElemenata> &mat) {\n    for(int i = 0; i < mat.br_redova; i++)\n        for(int j = 0; j < mat.br_kolona; j++) \n            std::cin >> mat.elementi[i][j];\n}"}]},"compile[debug]",{"execute":{"environment":{"stdin":"4\n5\n6\n7\n8\n9\n0\n1\n2\n3"},"expect":["4 7 7 10 7 10 10 13 7 10 10 13 10 13 13 16\n5 8 8 11 8 11 11 14 8 11 11 14 11 14 14 17\n6 9 9 12 9 12 12 15 9 12 12 15 12 15 15 18\n7 10 10 13 10 13 13 16 10 13 13 16 13 16 16 19\n8 11 11 14 11 14 14 17 11 14 14 17 14 17 17 20\n9 12 12 15 12 15 15 18 12 15 15 18 15 18 18 21\n0 3 3 6 3 6 6 9 3 6 6 9 6 9 9 12\n1 4 4 7 4 7 7 10 4 7 7 10 7 10 10 13\n2 5 5 8 5 8 8 11 5 8 8 11 8 11 11 14\n3 6 6 9 6 9 9 12 6 9 9 12 9 12 12 15"]}},"debug","profile[asan]"],"name":"Test 14","id":14}],"code":"200"}