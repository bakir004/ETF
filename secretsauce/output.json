{"id":0,"name":"Tehnike programiranja, SkriveniZ 5, Zadatak 5","version":"3","languages":["C++"],"tools":{"compile":{"require":"g++","features":["optimize","warn","pedantic","C++14"]},"compile[debug]":{"require":"g++","features":["debug","C++14","asan"]},"execute":{"require":"asan"},"debug":[],"profile[asan]":{"require":"asan","input_file":"stderr.txt","fast":true}},"prepare":["compile"],"tests":[{"tools":[{"patch":[{"position":"above_main","code":"//---------------------------------------------------------------------------------------------------------------\n// Tehnike programiranja - Akademska 2023/2024 godina\n// Zada\u0107a 5 - Zadatak 5\n// Odgovorni asistent: Vahidin Hasi\u0107 vhasic1@etf.unsa.ba\n// Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 5, obratite se na navedeni mail.\n//---------------------------------------------------------------------------------------------------------------"}]},"compile[debug]",{"execute":{"expect":["Unesite broj redova i kolona za matricu: Unesite elemente matrice:\n(1,1) = (1,2) = (1,3) = (1,4) = (2,1) = (2,2) = (2,3) = (2,4) = (3,1) = (3,2) = (3,3) = (3,4) = Unesite ime tekstualne datoteke: Unesite ime binarne datoteke: Ucitana matrica iz tekstualne datoteke: \n2.5-31.124\n00.253.1642.3\n-1.72.505\nUcitana matrica iz binarne datoteke:\n2.5-31.124\n00.253.1642.3\n-1.72.505"],"environment":{"stdin":"3 4\n2.5\n-3\n1.12\n4\n0\n0.25\n3.16\n42.3\n-1.7\n2.5\n0\n5\ntest.txt\ntest.dat"}}},"debug","profile[asan]"],"name":"Test 1","id":1},{"tools":[{"patch":[{"position":"main","code":"int br_redova = 2;\n        int br_kolona = 3;\n        Matrica<double> m(br_redova, br_kolona);\n        m(1, 1) = 1.1;\n        m(1, 2) = 2.2;\n        m(1, 3) = 3.3;\n        m(2, 1) = 4.4;\n        m(2, 2) = 5.5;\n        m(2, 3) = 6.6;\n\n        std::string filenameText = \"test_matrix.txt\";\n        m.SacuvajUTekstualnuDatoteku(filenameText);\n\n        std::ifstream file(filenameText);\n\n        // open file and print all content\n        while (!file.eof())\n        {\n            std::string line;\n            std::getline(file, line);\n            std::cout << line << std::endl;\n        }"}]},"compile[debug]",{"execute":{"expect":["1.1,2.2,3.3\n4.4,5.5,6.6"]}},"debug","profile[asan]"],"name":"Test 2","id":2,"options":["hidden"]},{"tools":[{"patch":[{"position":"main","code":"int br_redova = 2;\n        int br_kolona = 3;\n        Matrica<double> m(br_redova, br_kolona);\n        m(1, 1) = 1.1;\n        m(1, 2) = 2.2;\n        m(1, 3) = 3.3;\n        m(2, 1) = 4.4;\n        m(2, 2) = 5.5;\n        m(2, 3) = 6.6;\n\n        std::string filenameText = \"test_matrix.dat\";\n        m.SacuvajUBinarnuDatoteku(filenameText);\n    \n        std::ifstream file(filenameText, std::ios::binary);\n\n        // open binary file and print all content\n        Matrica<double> m2(br_redova, br_kolona);\n        m2.ObnoviIzBinarneDatoteke(filenameText);\n        std::cout << m2 << std::endl;"}]},"compile[debug]",{"execute":{"expect":["1.12.23.3\n4.45.56.6"]}},"debug","profile[asan]"],"name":"Test 3","id":3,"options":["hidden"]},{"tools":[{"patch":[{"position":"main","code":"        const std::string filename = \"binary_file.dat\";\n        Matrica<double> m(3, 4);\n        m(1,1) = 2.5; m(1,2) = -3; m(1,3) = 1.12; m(1,4) = 4;\n        m(2,1) = 0; m(2,2) = 0.25; m(2,3) = 3.16; m(2,4) = 42.3;\n        m(3,1) = -1.7; m(3,2) = 2.5; m(3,3) = 0; m(3,4) = 5;\n        m.SacuvajUBinarnuDatoteku(filename);\n\n        try\n        {\n            Matrica<double> m2(0,0);\n            m2.ObnoviIzBinarneDatoteke(\"nepostojeca.dat\");\n        }\n        catch(const std::exception& e)\n        {\n            std::cout << e.what() << '\\n';\n        }\n\n        Matrica<double> m2(0,0);\n        m2.ObnoviIzBinarneDatoteke(filename);\n\n        std::cout << m2;"}]},"compile[debug]",{"execute":{"expect":["Trazena datoteka ne postoji\n2.5-31.124\n00.253.1642.3\n-1.72.505"]}},"debug","profile[asan]"],"name":"Test 4","id":5,"options":["hidden"]},{"tools":[{"patch":[{"position":"main","code":"        const std::string filename = \"file.txt\";\n        Matrica<double> m(3, 4);\n        m(1,1) = 2.5; m(1,2) = -3; m(1,3) = 1.12; m(1,4) = 4;\n        m(2,1) = 0; m(2,2) = 0.25; m(2,3) = 3.16; m(2,4) = 42.3;\n        m(3,1) = -1.7; m(3,2) = 2.5; m(3,3) = 0; m(3,4) = 5;\n        m.SacuvajUTekstualnuDatoteku(filename);\n\n        Matrica<double> m2(0,0);\n        try\n        {\n            m2.ObnoviIzTekstualneDatoteke(\"nepostojeca.txt\");\n        }\n        catch (const std::exception &e)\n        {\n            std::cout << e.what() << '\\n';\n        }\n\n        m2.ObnoviIzTekstualneDatoteke(filename);\n\n        std::cout << m2;"}]},"compile[debug]",{"execute":{"expect":["Trazena datoteka ne postoji\n2.5-31.124\n00.253.1642.3\n-1.72.505"]}},"debug","profile[asan]"],"name":"Test 5","id":6,"options":["hidden"]},{"tools":[{"patch":[{"position":"main","code":"        const std::string filename = \"file.txt\";\n        Matrica<double> m(3, 4);\n        m(1,1) = 2.5; m(1,2) = -3; m(1,3) = 1.12; m(1,4) = 4;\n        m(2,1) = 0; m(2,2) = 0.25; m(2,3) = 3.16; m(2,4) = 42.3;\n        m(3,1) = -1.7; m(3,2) = 2.5; m(3,3) = 0; m(3,4) = 5;\n        m.SacuvajUTekstualnuDatoteku(filename);\n\n        // random text\n    // write some data to the file\n    std::ofstream file(filename, std::ios::app);\n    file << \"Hello, world!\" << std::endl;\n    file.close();\n\n    Matrica<double> m2(3, 4);\n    try\n    {\n        m2.ObnoviIzTekstualneDatoteke(filename);\n    }\n    catch (const std::exception &e)\n    {\n        std::cout << e.what() << '\\n';\n    }"}]},"compile[debug]",{"execute":{"expect":["Datoteka sadrzi besmislene podatke"]}},"debug","profile[asan]"],"name":"Test 6","id":7},{"tools":[{"patch":[{"position":"main","code":"const std::string filename = \"file.txt\";\n        Matrica<double> m(3, 4);\n        m(1,1) = 2.5; m(1,2) = -3; m(1,3) = 1.12; m(1,4) = 4;\n        m(2,1) = 0; m(2,2) = 0.25; m(2,3) = 3.16; m(2,4) = 42.3;\n        m(3,1) = -1.7; m(3,2) = 2.5; m(3,3) = 0; m(3,4) = 5;\n        m.SacuvajUTekstualnuDatoteku(filename);\n\n        Matrica<double> m2(filename, false);\n        \n        std::cout << m2 << std::endl;"}]},"compile[debug]",{"execute":{"expect":["2.5-31.124\n00.253.1642.3\n-1.72.505"]}},"debug","profile[asan]"],"name":"Test 7","id":9,"options":["hidden"]},{"tools":[{"patch":[{"position":"main","code":"const std::string filename = \"file.dat\";\n        Matrica<double> m(3, 4);\n        m(1,1) = 2.5; m(1,2) = -3; m(1,3) = 1.12; m(1,4) = 4;\n        m(2,1) = 0; m(2,2) = 0.25; m(2,3) = 3.16; m(2,4) = 42.3;\n        m(3,1) = -1.7; m(3,2) = 2.5; m(3,3) = 0; m(3,4) = 5;\n        m.SacuvajUBinarnuDatoteku(filename);\n\n        Matrica<double> m2(filename, true);\n\n        std::cout << m2 << std::endl;"}]},"compile[debug]",{"execute":{"expect":["2.5-31.124\n00.253.1642.3\n-1.72.505"]}},"debug","profile[asan]"],"name":"Test 8","id":10}],"code":"200"}