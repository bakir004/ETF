<input type="hidden" name="task" value="{&quot;id&quot;:0,&quot;name&quot;:&quot;Tehnike programiranja, S_Z 3, Zadatak 3&quot;,&quot;version&quot;:&quot;3&quot;,&quot;languages&quot;:[&quot;C++&quot;],&quot;tools&quot;:{&quot;compile&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;optimize&quot;,&quot;warn&quot;,&quot;pedantic&quot;,&quot;C++17&quot;]},&quot;compile[debug]&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;debug&quot;,&quot;C++17&quot;,&quot;asan&quot;]},&quot;execute&quot;:{&quot;require&quot;:&quot;asan&quot;},&quot;debug&quot;:[],&quot;profile[asan]&quot;:{&quot;require&quot;:&quot;asan&quot;,&quot;input_file&quot;:&quot;stderr.txt&quot;,&quot;fast&quot;:true}},&quot;prepare&quot;:[&quot;compile&quot;],&quot;tests&quot;:[{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/eventualne gre\u0161ke u testovima javiti na tpozderac1@etf.unsa.ba\nMatrica<double> a, b, c;\nint m=3, n=4;\nstd::vector<double> p{1,1,1};\ntry {\n    a = StvoriMatricu<double>(m, n);\n    MatricniPolinom(a,p);\n}\ncatch(std::domain_error e) {\n    std::cout << \&quot;IZUZETAK: \&quot;<<e.what();\n}\nUnistiMatricu(a); UnistiMatricu(b); UnistiMatricu(c);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;IZUZETAK: Matrica mora biti kvadratna\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 1&quot;,&quot;id&quot;:1},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\nMatrica<double> a, b, c;\nint m=3, n=4;\n\ntry {\n    a = StvoriMatricu<double>(m, n);\n    b = StvoriMatricu<double>(m, n);\n    c=ProduktMatrica(a,b);\n}\ncatch(std::domain_error e) {\n    std::cout << \&quot;IZUZETAK: \&quot;<<e.what();\n}\nUnistiMatricu(a); UnistiMatricu(b); UnistiMatricu(c);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;IZUZETAK: Matrice nisu saglasne za mnozenje&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 2&quot;,&quot;id&quot;:2},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;_main();&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;environment&quot;:{&quot;stdin&quot;:&quot;2\n1\n3\n4\n2\n2\n5\n6\n1\n&quot;},&quot;expect&quot;:[&quot;Unesite dimenziju kvadratne matrice: \nUnesite elemente matrice A:\nA(1,1) = \nA(1,2) = \nA(2,1) = \nA(2,2) = \nUnesite red polinoma:\nUnesite koeficijente polinoma:  \n        24        27\n        36        33&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 3&quot;,&quot;id&quot;:3},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;Matrica<int> m1(StvoriMatricu<int>(3,4)), m2(StvoriMatricu<int>(4,2)), m3;\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[0][3] = 7;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[1][3] = 8;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  m1.elementi[2][3] = 0;\n  m2.elementi[0][0] = 78;\n  m2.elementi[0][1] = 1;\n  m2.elementi[1][0] = 35;\n  m2.elementi[1][1] = 13;\n  m2.elementi[2][0] = 0;\n  m2.elementi[2][1] = -7;\n  m2.elementi[3][0] = 4;\n  m2.elementi[3][1] = 3;\n  m3 = ProduktMatrica(m1, m2); IspisiMatricu(m3, 4);\n  UnistiMatricu(m1); UnistiMatricu(m2); UnistiMatricu(m3);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot; 324  54\n 355 137\n1192 282&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 4&quot;,&quot;id&quot;:4},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot; Matrica<int> m1(StvoriMatricu<int>(3,3));\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  IspisiMatricu(m1, 3, 0, true);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;  2  4  3\n  1  7 -3\n  9 14-13&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 5&quot;,&quot;id&quot;:5},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;  Matrica<int> m1(StvoriMatricu<int>(3,2)), m2(StvoriMatricu<int>(4,2)), m3;\n  try {\n    m3 = ProduktMatrica(m1, m2);\n    IspisiMatricu(m3, 4);\n  }\n  catch (std::domain_error e)\n  {\n    std::cout << \&quot;Domain error: \&quot; << e.what();\n  }\n  UnistiMatricu(m1); UnistiMatricu(m2);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Domain error: Matrice nisu saglasne za mnozenje&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 6&quot;,&quot;id&quot;:6},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;Matrica<int> m1(StvoriMatricu<int>(3,3)), m2;\n  m1.elementi[0][0] = 2;\n  m1.elementi[0][1] = 4;\n  m1.elementi[0][2] = 3;\n  m1.elementi[1][0] = 1;\n  m1.elementi[1][1] = 7;\n  m1.elementi[1][2] = -3;\n  m1.elementi[2][0] = 9;\n  m1.elementi[2][1] = 14;\n  m1.elementi[2][2] = -13;\n  m2 = ProduktMatrica(m1, m1);\n  IspisiMatricu(m2, 4);\n  UnistiMatricu(m1); UnistiMatricu(m2);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;  35  78 -45\n -18  11  21\n -85 -48 154&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 7&quot;,&quot;id&quot;:7},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;Matrica<double> m1(StvoriMatricu<double>(2,2));\n  m1.elementi[0][0] = 1;\n  m1.elementi[0][1] = 2;\n  m1.elementi[1][0] = 3;\n  m1.elementi[1][1] = 4;\n  std::vector<double> v {-2.5,-1,-3,4};\n  IspisiMatricu(MatricniPolinom(m1,v),9,6,true);\nUnistiMatricu(m1);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;    123.5      184\n      276    399.5&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 8&quot;,&quot;id&quot;:8},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;Matrica<double> m1(StvoriMatricu<double>(2,2));\nstd::vector<double> v {3.4};\n  IspisiMatricu(MatricniPolinom(m1,v),5,6,true);\nUnistiMatricu(m1);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;  3.4    0\n    0  3.4&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 9&quot;,&quot;id&quot;:9},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;#include <new>\n#include <cstdlib>\nconst int memorija(200);\nstatic int totalAlloc;\nvoid *operator new[] ( size_t size )\n{\n    totalAlloc += size;\n    if (totalAlloc > memorija) {\n        std::bad_alloc e;\n        throw e;\n    }\n\n    return std::malloc( size );\n}\n\nvoid operator delete[](void* pok) {\n    std::free(pok);\n}&quot;},{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/ Ponasanje u slucaju nedovoljne kolicine memorije\nMatrica<double> m1(StvoriMatricu<double>(2,2));\nm1.elementi[0][0] = 1;\nm1.elementi[0][1] = 2;\nm1.elementi[1][0] = 3;\nm1.elementi[1][1] = 4;\ntry {\n    std::vector<double> v{1,2,3,4,5,6};\n    IspisiMatricu(MatricniPolinom(m1,v),9,6,true);\n    std::cout<<\&quot;Ovo se ne smije ispisati\&quot;<<std::endl;\n} catch(std::bad_alloc) {\n    std::cout << \&quot;Nema dovoljno memorije!\\n\&quot;;\n} catch(...) {\n    std::cout << \&quot;Ni ovo se ne smije ispisati\&quot; << std::endl;\n}\nUnistiMatricu(m1);&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Nema dovoljno memorije!\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 10&quot;,&quot;id&quot;:10}],&quot;code&quot;:&quot;200&quot;}">
