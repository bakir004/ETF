<input type="hidden" name="task" value="{&quot;id&quot;:0,&quot;name&quot;:&quot;Tehnike programiranja, Zada\u0107a 2, Zadatak 5&quot;,&quot;version&quot;:&quot;3&quot;,&quot;languages&quot;:[&quot;C++&quot;],&quot;tools&quot;:{&quot;compile&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;optimize&quot;,&quot;warn&quot;,&quot;pedantic&quot;,&quot;C++17&quot;]},&quot;compile[debug]&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;debug&quot;,&quot;C++17&quot;,&quot;asan&quot;]},&quot;execute&quot;:{&quot;require&quot;:&quot;asan&quot;},&quot;debug&quot;:[],&quot;profile[asan]&quot;:{&quot;require&quot;:&quot;asan&quot;,&quot;input_file&quot;:&quot;stderr.txt&quot;,&quot;fast&quot;:true}},&quot;prepare&quot;:[&quot;compile&quot;],&quot;tests&quot;:[{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/eventualne probleme sa testovima javiti na kerim.hodzic@etf.unsa.ba\n_main();&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Duzina sekvenci:\nElementi prve sekvence:\nElementi druge sekvence:\nTablica mnozenja:\n5\n2 6\n8 24 48\n7 21 42 14&quot;],&quot;environment&quot;:{&quot;stdin&quot;:&quot;4\n5 2 8 7\n1 3 6 2\n&quot;}}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 1&quot;,&quot;id&quot;:1},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;try {\n        std::vector<float> a = {1, 2.2, 3, 4};\n        std::list<double> b = {5.5, 6.5, 7.4, 8.1};\n\n        \/\/ Simetri\u010dna funkcija\n        auto f1 = [](auto x, auto y) { return x + y; };\n\n        \/\/ Nesimetri\u010dna funkcija\n        auto f2 = [](auto x, auto y) { return x - y; };\n\n        std::cout << \&quot;Test simetri\u010dne funkcije:\\n\&quot;;\n        auto t1 = KreirajFunkcijskuTablicu(a.begin(), a.end(), b.begin(), f1);\n\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j <= i; j++) {\n                std::cout << t1[i][j] << \&quot; \&quot;;\n            }\n            std::cout << std::endl;\n        }\n\n        delete[] t1[0];\n        delete[] t1;\n    }\n    catch (const std::logic_error&amp; e) {\n        std::cout << e.what() << std::endl;\n    }\n    catch (const std::exception&amp; e) {\n        std::cout << \&quot;GRE\u0160KA: \&quot; << e.what() << std::endl;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;#include <algorithm>\n#include <list>\n#include <iomanip>\n#include <stdexcept>&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Test simetri\u010dne funkcije:\n6.5 \n7.7 8.7 \n8.5 9.5 10.4 \n9.5 10.5 11.4 12.1 &quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 2&quot;,&quot;id&quot;:2},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;       try {\n        std::deque<int> a = {1, 2, 3, 4};\n        std::forward_list<int> b = {5, 6, 7, 8};\n\n        \/\/ Simetri\u010dna funkcija\n        auto f1 = [](int x, int y) { return std::max(x, y); };\n\n        \/\/ Nesimetri\u010dna funkcija\n        auto f2 = [](int x, int y) { return x \/ y; };\n\n        std::cout << \&quot;Test simetri\u010dne funkcije:\\n\&quot;;\n        auto t1 = KreirajFunkcijskuTablicu(a.begin(), a.end(), b.begin(), f1);\n\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j <= i; j++) {\n                std::cout << std::setw(4) << t1[i][j];\n            }\n            std::cout << std::endl;\n        }\n\n        delete[] t1[0];\n        delete[] t1;\n  }\n    catch (const std::logic_error&amp; e) {\n        std::cout << e.what() << std::endl;\n    }\n    catch (const std::exception&amp; e) {\n        std::cout << \&quot;GRE\u0160KA: \&quot; << e.what() << std::endl;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;#include <algorithm>\n#include <list>\n#include <iomanip>\n#include <stdexcept>\n#include <forward_list>&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Test simetri\u010dne funkcije:\n   5\n   5   6\n   5   6   7\n   5   6   7   8&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 3&quot;,&quot;id&quot;:3},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;try {\n        std::deque<float> a = {1.11, 2.22, 3.33, 4.44};\n        std::list<double> b = {5.55, 6.66, 7.77, 8.88};\n        std::forward_list<long int> c = {true, false, false, true};\n        std::vector<short int> d = {true, false, false, true};\n\n\n        \/\/ Simetri\u010dna funkcija\n               auto f1 = [](bool x, bool y) { return x &amp;&amp; y; };\n        \/\/ Nesimetri\u010dna funkcija\n        auto f2 = [](auto x, auto y) {\n            throw (std::runtime_error(\&quot;Simulacija problema pri ra\u010dunanju\&quot;));\n            return x-y;\n};\n\n        std::cout << \&quot;Test simetri\u010dne funkcije:\\n\&quot;;\n        auto t1 = KreirajFunkcijskuTablicu(c.begin(), c.end(), d.begin(), f1);\n\n        for (int i = 0; i < a.size(); i++) {\n            for (int j = 0; j <= i; j++) {\n                std::cout << std::setw(4) << t1[i][j];\n            }\n            std::cout << std::endl;\n        }\n\n        delete[] t1[0];\n        delete[] t1;\n        std::cout << \&quot;\\nTest nesimetri\u010dne funkcije:\\n\&quot;;\n        auto t2 = KreirajFunkcijskuTablicu(a.begin(), a.end(), b.begin(), f2); \/\/ ovo treba baciti izuzetak\n        delete[] t2[0];\n        delete[] t2;\n    }\n    catch (const std::runtime_error&amp; e) {\n        std::cout << e.what() << std::endl;\n    }\n    catch (const std::exception&amp; e) {\n        std::cout << \&quot;GRE\u0160KA: \&quot; << e.what() << std::endl;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;#include <algorithm>\n#include <list>\n#include <iomanip>\n#include <stdexcept>\n#include <forward_list>\n\n&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Test simetri\u010dne funkcije:\n   1\n   0   0\n   0   0   0\n   1   0   0   1\nTest nesimetri\u010dne funkcije:\nNeocekivani problemi pri racunanju&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 4&quot;,&quot;id&quot;:4},{&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;try {\n   std::srand(unsigned(std::time(nullptr))); \n   std::vector<int> a(1000000);\n   std::generate(a.begin(), a.end(), std::rand);\n   \/\/ std::for_each(a.begin(), a.begin()+1000, [](int x) {std::cout<<x<<\&quot; \&quot;;});\n    std::vector<int> b(1000000);\n   std::generate(b.begin(), b.end(), std::rand);\n   \/\/ std::for_each(b.begin(), b.begin()+1000, [](int x) {std::cout<<x<<\&quot; \&quot;;});\n           \/\/ Simetri\u010dna funkcija\n        auto f1 = [](auto x, auto y) { return x + y; };\n\n        auto c = KreirajFunkcijskuTablicu(a.begin(), a.end(), b.begin(), f1);\n   for(int i = 0; i < 100000; i++) {\n     for(int j = 0; j <= i; j++) std::cout << c[i][j] << \&quot; \&quot;;\n     std::cout << std::endl;\n   } \n   delete[] c[0]; delete[] c;\n    }\n    catch (std::range_error err) {\n    std::cout << err.what();\n  }\n    catch (const std::logic_error&amp; e) {\n        std::cout << e.what() << std::endl;\n    }\n    catch (const std::exception&amp; e) {\n        std::cout << \&quot;GRE\u0160KA: \&quot; << e.what() << std::endl;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;#include <algorithm>\n#include <ctime>&quot;},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;static size_t alocirano(0);\nstatic int brojac_new(0);\nstatic int brojac_deleteniz(0);\nstatic size_t alokacije[20];\nconst size_t RAM = 35 * sizeof(int);\n\nvoid *operator new[] (size_t vel)\n{\n    if (RAM < alocirano+vel) throw std::bad_alloc();\n    alokacije[brojac_new]=vel;    \n    brojac_new++;\n    alocirano+=vel;   \n    return std::malloc (vel);\n}\nvoid operator delete [] ( void* ptr)  noexcept{\n  brojac_deleteniz++;\n  free(ptr);\n}&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Nema dovoljno memorije&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;name&quot;:&quot;Test 5&quot;,&quot;id&quot;:5}],&quot;code&quot;:&quot;200&quot;}">
