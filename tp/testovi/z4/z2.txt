<input type="hidden" name="task" value="{&quot;id&quot;:0,&quot;name&quot;:&quot;Tehnike programiranja (2020\/2021), Zada\u0107a 4, Zadatak 2&quot;,&quot;languages&quot;:[&quot;C++&quot;],&quot;tools&quot;:{&quot;compile&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;optimize&quot;,&quot;warn&quot;,&quot;pedantic&quot;,&quot;C++17&quot;]},&quot;compile[debug]&quot;:{&quot;require&quot;:&quot;g++&quot;,&quot;features&quot;:[&quot;debug&quot;,&quot;C++17&quot;,&quot;asan&quot;]},&quot;execute&quot;:{&quot;require&quot;:&quot;asan&quot;},&quot;debug&quot;:[],&quot;profile[asan]&quot;:{&quot;require&quot;:&quot;asan&quot;,&quot;fast&quot;:true,&quot;input_file&quot;:&quot;stderr.txt&quot;}},&quot;tests&quot;:[{&quot;id&quot;:2,&quot;name&quot;:&quot;Test 2&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/AT (c9 - 4) (javni)\n\n_main();&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;environment&quot;:{&quot;stdin&quot;:&quot;2\n0 0 0\n-1\n-2\n2\n1 1 1\n0\n1 1 1\n1\n8 8 8\n2.1&quot;},&quot;expect&quot;:[&quot;Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\nNeispravan poluprecnik, unesite ponovo:\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(0,0,0),2}\n{(8,8,8),2.1}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:3,&quot;name&quot;:&quot;Test 3&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/AT (c9 - 3) (javni)\n\n_main();&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;environment&quot;:{&quot;stdin&quot;:&quot;5\n0 0 d\n1 1 1\nd\n1\n5 6 8\n5\n17 20 31\n6\n30 30 30\n2\n123 -130 500\n30&quot;},&quot;expect&quot;:[&quot;Unesite broj kugli: Unesite centar za 1. kuglu: Neispravan centar, unesite ponovo:\nUnesite poluprecnik: Neispravan poluprecnik, unesite ponovo:\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Unesite centar za 4. kuglu: Unesite poluprecnik: Unesite centar za 5. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(1,1,1),1}\n{(30,30,30),2}\n{(5,6,8),5}\n{(17,20,31),6}\n{(123,-130,500),30}&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:4,&quot;name&quot;:&quot;Test 4&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/AT (c9 - 2) (javni)\n\n_main();&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;environment&quot;:{&quot;stdin&quot;:&quot;0\n-1\n3\n0 0 0\n1\n0 0 2\n1\n0 0 3\n1\n0 0 10\n2&quot;},&quot;expect&quot;:[&quot;Unesite broj kugli: Neispravan broj kugli, unesite ponovo!\nNeispravan broj kugli, unesite ponovo!\nUnesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(0,0,0),1}\n{(0,0,3),1}\n{(0,0,10),2}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:5,&quot;name&quot;:&quot;Test 5&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/AT (c9 - 1) (javni)\n_main();&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;environment&quot;:{&quot;stdin&quot;:&quot;3\n2 3 1\n5\n10 7 8\n2\n4 6 3\n7\n5 8 4\n1&quot;},&quot;expect&quot;:[&quot;Unesite broj kugli: Unesite centar za 1. kuglu: Unesite poluprecnik: Unesite centar za 2. kuglu: Unesite poluprecnik: Unesite centar za 3. kuglu: Unesite poluprecnik: Nedozvoljeno preklapanje\nUnesite centar za 3. kuglu: Unesite poluprecnik: \nKugle nakon obavljenog sortiranja: \n{(5,8,4),1}\n{(10,7,8),2}\n{(2,3,1),5}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:6,&quot;name&quot;:&quot;Test 6&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT - test konstruktora sa jednim parametrom\n    try {\n        std::cout << std::boolalpha << std::is_convertible<double, NepreklapajucaKugla>::value << std::endl;\n        NepreklapajucaKugla k;\n        k.Ispisi();\n        std::cout << std::endl;\n        try {\n            NepreklapajucaKugla k1(5);\n        }\n        catch(std::logic_error &amp;ex){\n            std::cout << \&quot;OK \&quot; << ex.what() << std::endl;\n        }\n        NepreklapajucaKugla k2(-1);\n\n    }\n    catch(std::domain_error &amp;ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;false\n{(0,0,0),0}\nOK Nedozvoljeno preklapanje\nOK Ilegalan poluprecnik\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:7,&quot;name&quot;:&quot;Test 7&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT - Test konstruktora sa 4 parametra\n    try{\n        NepreklapajucaKugla k1(5,5,5,5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(5,5,5),5}\n{(-5,-5,-5),2}\nOK Ilegalan poluprecnik\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:8,&quot;name&quot;:&quot;Test 8&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT - Test konstruktra sa tuple-om\n\n    try{\n        std::cout << std::boolalpha << pretvorba_tipa_vise_argumenata<NepreklapajucaKugla, std::tuple<double, double, double>, double>::value << std::endl;\n        NepreklapajucaKugla k1(std::make_tuple(5,5,5),5);\n        k1.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k2 = {-5,-5,-5,2};\n        k2.Ispisi();\n        std::cout << std::endl;\n        NepreklapajucaKugla k3(-1,1,-1,-1);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;above_main&quot;,&quot;code&quot;:&quot;#include <type_traits>\n#include <iomanip>\n\ntemplate <typename To_, typename... From_>\nclass pretvorba_tipa_vise_argumenata {\nprivate:\n    template <typename To>\n    struct testKonstrukcije {\n        testKonstrukcije(To);\n    };\n\n    template <typename To, typename... From>\n    struct pomocna {};\n\n    template <typename To, typename... From>\n    static auto test(pomocna<To, From...>)\n    -> decltype(testKonstrukcije<To>({std::declval<From>()...}), std::true_type());\n    static auto test(...)\n    -> std::false_type;\n\npublic:\n    static constexpr bool value = decltype(test(pomocna<To_, From_...>()))::value;\n};&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;false\n{(5,5,5),5}\n{(-5,-5,-5),2}\nOK Ilegalan poluprecnik&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:9,&quot;name&quot;:&quot;Test 9&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT - Test metoda DajX, DajY, DajZ i DajCentar\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(1,2,3), 2.3);\n        std:: cout << std::fixed << std::setprecision(3);\n        std::cout << \&quot;Centar: \&quot; << k.DajX() << \&quot; \&quot; << k.DajY() << \&quot; \&quot;<< k.DajZ();\n        std::cout << \&quot;\\nPoluprecnik: \&quot; << k.DajPoluprecnik();\n        NepreklapajucaKugla k1(4,3,10,1);\n        std::tuple<double, double, double> centar(k1.DajCentar());\n        std::cout << \&quot;\\nNovi centar: \&quot; <<std::get<0>(centar) << \&quot; \&quot; << std::get<1>(centar) << \&quot; \&quot; << std::get<2>(centar);\n\n    }\n    catch(...) {\n        std::cout << \&quot;IZUZETAK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Centar: 1.000 2.000 3.000\nPoluprecnik: 2.300\nNovi centar: 4.000 3.000 10.000\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:10,&quot;name&quot;:&quot;Test 10&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;   \/\/AT - Test metoda DajPovrsinu,  DajZapreminu i Ispisi i RastojanjeCentara\n    \n    try{\n        const NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        const NepreklapajucaKugla k1(std::make_tuple(-80,-100,30.3), 18.01);\n        std::cout << std::fixed << std::setprecision(5);\n        std::cout << \&quot;Povrsina kugle k: \&quot; << k.DajPovrsinu()\n                  << \&quot;\\nZapremina kugle k : \&quot; << k.DajZapreminu();\n        std::cout << std::endl;\n        std::cout << \&quot;Povrsina kugle k1: \&quot; << k.DajPovrsinu()\n                  << \&quot;\\nZapremina kugle k1: \&quot; << k.DajZapreminu();\n        std::cout << \&quot;\\nRastojanje centara kugle k i k1: \&quot;\n                  << RastojanjeCentara(k,k1);\n        std::cout << std::endl << std::defaultfloat;\n        k.Ispisi();\n\n    }\n    catch(...) {\n        std::cout << \&quot;IZUZETAK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;Povrsina kugle k: 11537.05920\nZapremina kugle k : 116524.29789\nPovrsina kugle k1: 11537.05920\nZapremina kugle k1: 116524.29789\nRastojanje centara kugle k i k1: 145.61212\n{(8,16,32),30.3}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:11,&quot;name&quot;:&quot;Test 11&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/  - Test medota PostaviX, PostaviY, PostaviZ\n\n\n    try{\n        NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        k.PostaviX(-1).PostaviY(-2).PostaviZ(-3);\n        k.Ispisi();\n    }\n    catch(...) {\n        std::cout << \&quot;IZUZETAK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(-1,-2,-3),30.3}\n\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:12,&quot;name&quot;:&quot;Test 12&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n    \/\/ - Test metode postavi poluprecnik\n\n    try{\n        NepreklapajucaKugla k(std::make_tuple(8,16,32), 30.3);\n        k.PostaviPoluprecnik(20.289);\n        k.Ispisi();\n        std::cout << std::endl;\n        k.PostaviPoluprecnik(-0.0000001);\n\n    }\n    catch(std::domain_error ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(8,16,32),20.289}\nOK Ilegalan poluprecnik\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:13,&quot;name&quot;:&quot;Test 13&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT8  - Test metoda PostaviCentar\n    try{\n        NepreklapajucaKugla k(20);\n        k.PostaviCentar(1.5,10,25);\n        k.Ispisi();\n        std::cout << std::endl;\n        k.PostaviCentar(std::make_tuple(25,10,1.5));\n        k.Ispisi();\n    }\n    catch(...){\n        std::cout << \&quot;IZUZETAK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(1.5,10,25),20}\n{(25,10,1.5),20}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:14,&quot;name&quot;:&quot;Test 14&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n    \/\/ - Test metode Transliraj\n    try{\n        NepreklapajucaKugla k(10,10,10,20);\n        k.Transliraj(20.25, 1,-18.31);\n        k.Transliraj(-20.25, -1,18.31);\n        k.Ispisi();\n    }\n    catch(...){\n        std::cout << \&quot;IZUZETAK\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(10,10,10),20}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:15,&quot;name&quot;:&quot;Test 15&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n\/\/    AT10 (neaktivni) Provjera da li su zabranjeni koperacijuci konstruktor i operator dodjele\n\n    try {\n        std::cout << std::boolalpha << std::is_constructible<NepreklapajucaKugla, NepreklapajucaKugla>::value\n                  << \&quot; \&quot; << std::is_assignable<NepreklapajucaKugla, NepreklapajucaKugla>::value;\n        std::cout << \&quot;\\nEND\&quot;;\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK1 \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK1\&quot;;\n    }&quot;},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;false false\nEND\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:16,&quot;name&quot;:&quot;Test 16&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/    AT11 (skriveni) - Trivijalno testiranje preklapanja\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(4, 6, 3, 7);\n        k3.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &amp;ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(2,3,1),5}\n{(10,7,8),2}\nOK Nedozvoljeno preklapanje\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:17,&quot;name&quot;:&quot;Test 17&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;    \/\/AT12 (skriveni) - Test dodirivanje dvije kugle\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(2, 9.1, 1, 1);\n        k3.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k4(2, -3, 1, 1);\n        k4.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &amp;ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(2,3,1),5}\n{(10,7,8),2}\n{(2,9.1,1),1}\nOK Nedozvoljeno preklapanje\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:18,&quot;name&quot;:&quot;Test 18&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n    \/\/AT13 (skriveni) - Iskljucivanje kugle sa kraja\n    try{\n        NepreklapajucaKugla k1(2, 3, 1, 5);\n        k1.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k2(10, 7, 8, 2);\n        k2.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k3(2, 9.1, 1, 1);\n        k3.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla k4(2, -3.1, 1, 1);\n        k4.Ispisi(); std::cout << std::endl;\n        NepreklapajucaKugla *k5(new NepreklapajucaKugla(2, -4, 10, 2));\n        k5->Ispisi(); std::cout << std::endl;\n        delete k5;\n        NepreklapajucaKugla k6(2, -4, 10, 2);\n        k6.Ispisi(); std::cout << std::endl;\n    }\n    catch(std::logic_error &amp;ex){\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch(...){\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(2,3,1),5}\n{(10,7,8),2}\n{(2,9.1,1),1}\n{(2,-3.1,1),1}\n{(2,-4,10),2}\n{(2,-4,10),2}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:19,&quot;name&quot;:&quot;Test 19&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/    AT14 (nekativni) - Iskljucivanje kugli iz sredine\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i * 3, i * 4, i * 2, 1));\n        }\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        p.erase(p.begin() + 5);\n        p.erase(p.begin() + 5);\n        p.erase(p.begin() + 5);\n\n        try{NepreklapajucaKugla(16,21,11,2);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot; << ex.what() << std::endl;}\n        try{NepreklapajucaKugla(16,21,11,1);}catch(std::logic_error ex){std::cout<< \&quot; OK2 \&quot; << ex.what() << std::endl;}\n        try{NepreklapajucaKugla(16,21,11,0.73);}catch(std::logic_error ex){std::cout<< \&quot; NOT OK \&quot;;}\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(3,4,2),1}\n{(6,8,4),1}\n{(9,12,6),1}\n{(12,16,8),1}\n{(15,20,10),1}\n{(18,24,12),1}\n{(21,28,14),1}\n{(24,32,16),1}\n{(27,36,18),1}\n{(30,40,20),1}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n\n{(3,4,2),1}\n{(6,8,4),1}\n{(9,12,6),1}\n{(12,16,8),1}\n{(15,20,10),1}\n{(27,36,18),1}\n{(30,40,20),1}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;]},{&quot;id&quot;:20,&quot;name&quot;:&quot;Test 20&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n\/\/    AT15  (skriveni) Iskljucivanje kugle sa pocetka\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*-2, i * -4, i *-1, 1.5));\n        }\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n        p.erase(p.begin());\n        p.erase(p.begin());\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n        try{NepreklapajucaKugla(-5,-8,-20,16.5);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-5,-8,-20,16);}catch(std::logic_error ex){std::cout<< \&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-20,11,20);}catch(std::logic_error ex){std::cout<< \&quot; OK3 \&quot;<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-40,-12,2*sqrt(2)-1.5);}catch(std::logic_error ex){std::cout<< \&quot; OK4 \&quot;<< ex.what() << std::endl;}\n        try{NepreklapajucaKugla(-22,-40,-12,2*sqrt(2)-1.6);}catch(std::logic_error ex){std::cout<< \&quot; NOT OK \&quot;;}\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(-2,-4,-1),1.5}\n{(-4,-8,-2),1.5}\n{(-6,-12,-3),1.5}\n{(-8,-16,-4),1.5}\n{(-10,-20,-5),1.5}\n{(-12,-24,-6),1.5}\n{(-14,-28,-7),1.5}\n{(-16,-32,-8),1.5}\n{(-18,-36,-9),1.5}\n{(-20,-40,-10),1.5}\n\n{(-6,-12,-3),1.5}\n{(-8,-16,-4),1.5}\n{(-10,-20,-5),1.5}\n{(-12,-24,-6),1.5}\n{(-14,-28,-7),1.5}\n{(-16,-32,-8),1.5}\n{(-18,-36,-9),1.5}\n{(-20,-40,-10),1.5}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n OK3 Nedozvoljeno preklapanje\n OK4 Nedozvoljeno preklapanje\n\n{(-6,-12,-3),1.5}\n{(-8,-16,-4),1.5}\n{(-10,-20,-5),1.5}\n{(-12,-24,-6),1.5}\n{(-14,-28,-7),1.5}\n{(-16,-32,-8),1.5}\n{(-18,-36,-9),1.5}\n{(-20,-40,-10),1.5}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:21,&quot;name&quot;:&quot;Test 21&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/    AT16 (skriveni)  Test metode PostaviPoluprecnik\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*3, i * 4, i , 2));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[4]->PostaviPoluprecnik(sqrt(26)-(2 + 1e-14));}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        try{p[4]->PostaviPoluprecnik(sqrt(26)-2.1);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        p.erase(p.begin() + 3);\n        try{p[0]->PostaviPoluprecnik(sqrt(26)-(2 + 1e-14));}catch(std::logic_error ex){std::cout<<\&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        try{p[0]->PostaviPoluprecnik(sqrt(26)-2.1);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[8]->PostaviPoluprecnik(sqrt(26)-2);}catch(std::logic_error ex){std::cout<<\&quot; OK3 \&quot;<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(3,4,1),2}\n{(6,8,2),2}\n{(9,12,3),2}\n{(12,16,4),2}\n{(15,20,5),2}\n{(18,24,6),2}\n{(21,28,7),2}\n{(24,32,8),2}\n{(27,36,9),2}\n{(30,40,10),2}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n OK3 Nedozvoljeno preklapanje\n{(3,4,1),2.99902}\n{(6,8,2),2}\n{(9,12,3),2}\n{(15,20,5),2.99902}\n{(18,24,6),2}\n{(21,28,7),2}\n{(24,32,8),2}\n{(27,36,9),2}\n{(30,40,10),2}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:22,&quot;name&quot;:&quot;Test 22&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/    AT17 (skriveni)  Test metoda postavi centar\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviCentar(20,30,36.9);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[0]->PostaviCentar(20,30,37 - 1e-14);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        p.erase(p.begin() + 5);\n        try{p[2]->PostaviCentar(std::make_tuple(40,60,70));}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[2]->PostaviCentar(std::make_tuple(40,60,73));}catch(std::logic_error ex){std::cout<<\&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        try{p[8]->PostaviCentar(std::make_tuple(80,120,60));}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[8]->PostaviCentar(std::make_tuple(40,60,73));}catch(std::logic_error ex){std::cout<<\&quot; OK3 \&quot;<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(10,15,20),1}\n{(20,30,40),2}\n{(30,45,60),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(60,90,120),6}\n{(70,105,140),7}\n{(80,120,160),8}\n{(90,135,180),9}\n{(100,150,200),10}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n OK3 Nedozvoljeno preklapanje\n\n{(20,30,36.9),1}\n{(20,30,40),2}\n{(40,60,70),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(70,105,140),7}\n{(80,120,160),8}\n{(90,135,180),9}\n{(80,120,60),10}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:23,&quot;name&quot;:&quot;Test 23&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n\/\/    AT18 (skriveni) Test metode Transliraj\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->Transliraj(10,15,15);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[0]->Transliraj(0,0,3);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        try{p[5]->Transliraj(10,15,7);}catch(std::logic_error ex){std::cout<<\&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        try{p[5]->Transliraj(10,15,6);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[9]->Transliraj(-10,-15,-1.1);}catch(std::logic_error ex){std::cout<<\&quot; OK3 \&quot;<< ex.what() << std::endl;}\n        try{p[9]->Transliraj(-10,-15,-0.9);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        std::cout << \&quot;\\nEND\&quot;;\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;NOT OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(10,15,20),1}\n{(20,30,40),2}\n{(30,45,60),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(60,90,120),6}\n{(70,105,140),7}\n{(80,120,160),8}\n{(90,135,180),9}\n{(100,150,200),10}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n OK3 Nedozvoljeno preklapanje\n\nEND\n{(20,30,35),1}\n{(20,30,40),2}\n{(30,45,60),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(70,105,126),6}\n{(70,105,140),7}\n{(80,120,160),8}\n{(90,135,180),9}\n{(90,135,199.1),10}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:24,&quot;name&quot;:&quot;Test 24&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\/\/    AT19 (nekativni)  Provjera metoda PostaviX, PostaviY, PostaviZ\n\n    try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*10, i * 15, i*20 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviX(20).PostaviY(30).PostaviZ(36.9);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[0]->PostaviZ(37);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        p.erase(p.begin()+6);\n        try{p[5]->PostaviY(80).PostaviZ(100);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[5]->PostaviX(59.7);}catch(std::logic_error ex){std::cout<<\&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        try{p[8]->PostaviX(95).PostaviZ(195);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[8]->PostaviY(145);}catch(std::logic_error ex){std::cout<<\&quot; OK3 \&quot;<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK1\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(10,15,20),1}\n{(20,30,40),2}\n{(30,45,60),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(60,90,120),6}\n{(70,105,140),7}\n{(80,120,160),8}\n{(90,135,180),9}\n{(100,150,200),10}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n OK3 Nedozvoljeno preklapanje\n{(20,30,36.9),1}\n{(20,30,40),2}\n{(30,45,60),3}\n{(40,60,80),4}\n{(50,75,100),5}\n{(60,80,100),6}\n{(80,120,160),8}\n{(90,135,180),9}\n{(95,150,195),10}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]},{&quot;id&quot;:25,&quot;name&quot;:&quot;Test 25&quot;,&quot;tools&quot;:[{&quot;patch&quot;:[{&quot;position&quot;:&quot;main&quot;,&quot;code&quot;:&quot;\t\n\/\/    AT20 (nekativni) - Preklapanje kugle sa samom sobom\n\/\/    pomjeramo kuglu tako da se ona poklapa sa samim sobom\n\/\/    u metodama setterima, pri promjeni parametara kugla se ne bi trebala provjeravati sa samim sobom\n\n        try {\n        typedef std::shared_ptr<NepreklapajucaKugla> pokKugla;\n        std::vector<pokKugla> p;\n        int znak = 1;\n        for (int i = 1; i <= 10; i++) {\n            p.push_back(std::make_shared<NepreklapajucaKugla>(i*20, i * 15, i*10 , i));\n        }\n\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n\n        try{p[0]->PostaviX(20).PostaviY(15).PostaviZ(10);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[0]->Transliraj(1,-1,0);}catch(std::logic_error ex){std::cout<<\&quot;NOT OK \&quot;;}\n        p.erase(p.begin()+6);\n        try{p[4]->PostaviCentar(100,75,50);}catch(std::logic_error ex){std::cout<<\&quot; NOT OK \&quot;;}\n        try{p[4]->PostaviCentar(std::make_tuple(100,75,50));}catch(std::logic_error ex){std::cout<<\&quot;NOT OK \&quot;;}\n        try{p[5]->PostaviCentar(100,75,50);}catch(std::logic_error ex){std::cout<<\&quot; OK1 \&quot;<< ex.what() << std::endl;}\n        try{p[5]->PostaviCentar(std::make_tuple(100,75,50));}catch(std::logic_error ex){std::cout<<\&quot; OK2 \&quot;<< ex.what() << std::endl;}\n        std::cout << std::endl;\n        for(pokKugla &amp;k : p) {\n            k->Ispisi(); std::cout << std::endl;\n        }\n    }\n    catch (std::logic_error &amp;ex) {\n        std::cout << \&quot;OK1 \&quot; << ex.what();\n    }\n    catch (...) {\n        std::cout << \&quot;NOT OK1\&quot;;\n    }&quot;,&quot;use_markers&quot;:true},{&quot;position&quot;:&quot;top_of_file&quot;,&quot;code&quot;:&quot;\/\/---------------------------------------------------------------------------------------------------------------\n\/\/ Tehnike programiranja - Akademska 2024\/2025 godina\n\/\/ Zada\u0107a 4 - Zadatak 2\n\/\/ Odgovorni vi\u0161i asistent: Haris \u010capelj - hcapelj1@etf.unsa.ba\n\/\/ Za sva tehni\u010dka pitanja vezana za autotestove za zadatak 2, obratite se na navedeni mail.\n\/\/---------------------------------------------------------------------------------------------------------------&quot;}]},&quot;compile[debug]&quot;,{&quot;execute&quot;:{&quot;expect&quot;:[&quot;{(20,15,10),1}\n{(40,30,20),2}\n{(60,45,30),3}\n{(80,60,40),4}\n{(100,75,50),5}\n{(120,90,60),6}\n{(140,105,70),7}\n{(160,120,80),8}\n{(180,135,90),9}\n{(200,150,100),10}\n OK1 Nedozvoljeno preklapanje\n OK2 Nedozvoljeno preklapanje\n\n{(21,14,10),1}\n{(40,30,20),2}\n{(60,45,30),3}\n{(80,60,40),4}\n{(100,75,50),5}\n{(120,90,60),6}\n{(160,120,80),8}\n{(180,135,90),9}\n{(200,150,100),10}\t&quot;]}},&quot;debug&quot;,&quot;profile[asan]&quot;],&quot;options&quot;:[&quot;hidden&quot;]}],&quot;version&quot;:&quot;3&quot;,&quot;prepare&quot;:[&quot;compile&quot;],&quot;code&quot;:&quot;200&quot;}">
